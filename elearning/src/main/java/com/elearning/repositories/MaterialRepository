import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

public class MaterialRepository {
    private Connection conn;

    public MaterialRepository() throws SQLException {
        this.conn = DatabaseConnection.getConnection();
    }

    public void closeConnection() throws SQLException {
        if (conn != null && !conn.isClosed()) {
            conn.close();
        }
    }

    public void crearMaterial(Material material) throws SQLException {
        String sql = "INSERT INTO material (nombreMaterial, fechaHoraFinVigenciaMaterial, linkMaterial) VALUES (?, ?, ?)";
        try (PreparedStatement stmt = conn.prepareStatement(sql)) {
            stmt.setString(1, material.getNombreMaterial());
            stmt.setTimestamp(2, new java.sql.Timestamp(material.getFechaHoraFinVigenciaMaterial().getTime()));
            stmt.setString(3, material.getLinkMaterial());
            stmt.executeUpdate();
        }
    }

    public Material obtenerMaterialPorId(Long id) throws SQLException {
        String sql = "SELECT * FROM material WHERE codMaterial = ?";
        try (PreparedStatement stmt = conn.prepareStatement(sql)) {
            stmt.setLong(1, id);
            try (ResultSet rs = stmt.executeQuery()) {
                if (rs.next()) {
                    Material material = new Material();
                    material.setCodMaterial(rs.getLong("codMaterial"));
                    material.setNombreMaterial(rs.getString("nombreMaterial"));
                    material.setFechaHoraFinVigenciaMaterial(new Date(rs.getTimestamp("fechaHoraFinVigenciaMaterial").getTime()));
                    material.setLinkMaterial(rs.getString("linkMaterial"));
                    return material;
                }
            }
        }
        return null;
    }

    public List<Material> obtenerTodosLosMateriales() throws SQLException {
        List<Material> materiales = new ArrayList<>();
        String sql = "SELECT * FROM material";
        try (PreparedStatement stmt = conn.prepareStatement(sql);
             ResultSet rs = stmt.executeQuery()) {
            while (rs.next()) {
                Material material = new Material();
                material.setCodMaterial(rs.getLong("codMaterial"));
                material.setNombreMaterial(rs.getString("nombreMaterial"));
                material.setFechaHoraFinVigenciaMaterial(new Date(rs.getTimestamp("fechaHoraFinVigenciaMaterial").getTime()));
                material.setLinkMaterial(rs.getString("linkMaterial"));
                materiales.add(material);
            }
        }
        return materiales;
    }

    public void actualizarMaterial(Material material) throws SQLException {
        String sql = "UPDATE material SET nombreMaterial = ?, fechaHoraFinVigenciaMaterial = ?, linkMaterial = ? WHERE codMaterial = ?";
        try (PreparedStatement stmt = conn.prepareStatement(sql)) {
            stmt.setString(1, material.getNombreMaterial());
            stmt.setTimestamp(2, new java.sql.Timestamp(material.getFechaHoraFinVigenciaMaterial().getTime()));
            stmt.setString(3, material.getLinkMaterial());
            stmt.setLong(4, material.getCodMaterial());
            stmt.executeUpdate();
        }
    }

    public void eliminarMaterial(Long id) throws SQLException {
        String sql = "DELETE FROM material WHERE codMaterial = ?";
        try (PreparedStatement stmt = conn.prepareStatement(sql)) {
            stmt.setLong(1, id);
            stmt.executeUpdate();
        }
    }
}
